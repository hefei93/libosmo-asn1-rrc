/*
 * Generated by asn1c-0.9.24 (http://lionet.info/asn1c)
 * From ASN.1 module "InformationElements"
 * 	found in "../asn/InformationElements.asn"
 * 	`asn1c -fcompound-names -fnative-types`
 */

#ifndef	_E_AGCH_Information_r8_H_
#define	_E_AGCH_Information_r8_H_


#include <asn_application.h>

/* Including external dependencies */
#include "E-AGCH-ChannelisationCode.h"
#include <constr_SEQUENCE.h>
#include <BOOLEAN.h>
#include <NativeInteger.h>
#include "E-AGCH-Set-Config.h"
#include "Bler-Target.h"
#include "E-AGCH-Set-Config-VHCR.h"
#include "TPC-StepSizeTDD.h"
#include "E-AGCH-Set-Config-LCR.h"
#include "E-AGCH-InactivityMonitorThreshold-TDD128.h"
#include <constr_CHOICE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum E_AGCH_Information_r8__modeSpecific_PR {
	E_AGCH_Information_r8__modeSpecific_PR_NOTHING,	/* No components present */
	E_AGCH_Information_r8__modeSpecific_PR_fdd,
	E_AGCH_Information_r8__modeSpecific_PR_tdd
} E_AGCH_Information_r8__modeSpecific_PR;
typedef enum E_AGCH_Information_r8__modeSpecific__tdd_PR {
	E_AGCH_Information_r8__modeSpecific__tdd_PR_NOTHING,	/* No components present */
	E_AGCH_Information_r8__modeSpecific__tdd_PR_tdd384,
	E_AGCH_Information_r8__modeSpecific__tdd_PR_tdd768,
	E_AGCH_Information_r8__modeSpecific__tdd_PR_tdd128
} E_AGCH_Information_r8__modeSpecific__tdd_PR;

/* E-AGCH-Information-r8 */
typedef struct E_AGCH_Information_r8 {
	struct E_AGCH_Information_r8__modeSpecific {
		E_AGCH_Information_r8__modeSpecific_PR present;
		union E_AGCH_Information_r8__modeSpecific_u {
			struct E_AGCH_Information_r8__modeSpecific__fdd {
				E_AGCH_ChannelisationCode_t	 e_AGCH_ChannelisationCode;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} fdd;
			struct E_AGCH_Information_r8__modeSpecific__tdd {
				E_AGCH_Information_r8__modeSpecific__tdd_PR present;
				union E_AGCH_Information_r8__modeSpecific__tdd_u {
					struct E_AGCH_Information_r8__modeSpecific__tdd__tdd384 {
						BOOLEAN_t	*long_Term_Grant_Indicator	/* OPTIONAL */;
						long	 length_of_TTRI_field;
						E_AGCH_Set_Config_t	 e_AGCH_Set_Config;
						Bler_Target_t	 e_AGCH_BLER_Target;
						
						/* Context for parsing across buffer boundaries */
						asn_struct_ctx_t _asn_ctx;
					} tdd384;
					struct E_AGCH_Information_r8__modeSpecific__tdd__tdd768 {
						BOOLEAN_t	*long_Term_Grant_Indicator	/* OPTIONAL */;
						long	 length_of_TTRI_field;
						E_AGCH_Set_Config_VHCR_t	 e_AGCH_Set_Config;
						Bler_Target_t	 e_AGCH_BLER_Target;
						
						/* Context for parsing across buffer boundaries */
						asn_struct_ctx_t _asn_ctx;
					} tdd768;
					struct E_AGCH_Information_r8__modeSpecific__tdd__tdd128 {
						BOOLEAN_t	 rdi_Indicator;
						TPC_StepSizeTDD_t	 tpc_StepSize;
						E_AGCH_Set_Config_LCR_t	 e_AGCH_Set_Config;
						Bler_Target_t	 e_AGCH_BLER_Target;
						E_AGCH_InactivityMonitorThreshold_TDD128_t	*e_AGCH_InactivityMonitorThreshold	/* OPTIONAL */;
						
						/* Context for parsing across buffer boundaries */
						asn_struct_ctx_t _asn_ctx;
					} tdd128;
				} choice;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} tdd;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} modeSpecific;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} E_AGCH_Information_r8_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_E_AGCH_Information_r8;

#ifdef __cplusplus
}
#endif

#endif	/* _E_AGCH_Information_r8_H_ */
#include <asn_internal.h>
