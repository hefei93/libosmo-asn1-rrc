/*
 * Generated by asn1c-0.9.24 (http://lionet.info/asn1c)
 * From ASN.1 module "InformationElements"
 * 	found in "../asn/InformationElements.asn"
 * 	`asn1c -fcompound-names -fnative-types`
 */

#ifndef	_E_RUCCH_Info_H_
#define	_E_RUCCH_Info_H_


#include <asn_application.h>

/* Including external dependencies */
#include <NativeInteger.h>
#include "PersistenceScalingFactor.h"
#include <NativeEnumerated.h>
#include "SF16Codes.h"
#include <asn_SEQUENCE_OF.h>
#include <constr_SEQUENCE_OF.h>
#include "SF8Codes.h"
#include <constr_CHOICE.h>
#include "SF32Codes.h"
#include "SF16Codes2.h"
#include <constr_SEQUENCE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum E_RUCCH_Info__modeSpecificInfo_PR {
	E_RUCCH_Info__modeSpecificInfo_PR_NOTHING,	/* No components present */
	E_RUCCH_Info__modeSpecificInfo_PR_tdd384_tdd768,
	E_RUCCH_Info__modeSpecificInfo_PR_tdd128
} E_RUCCH_Info__modeSpecificInfo_PR;
typedef enum E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_RUCCH {
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_RUCCH_ms40	= 0,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_RUCCH_ms80	= 1,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_RUCCH_ms120	= 2,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_RUCCH_ms160	= 3,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_RUCCH_ms200	= 4,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_RUCCH_ms240	= 5,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_RUCCH_ms280	= 6,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_RUCCH_ms320	= 7
} e_E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_RUCCH;
typedef enum E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__e_RUCCH_Midamble {
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__e_RUCCH_Midamble_direct	= 0,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__e_RUCCH_Midamble_direct_Inverted	= 1
} e_E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__e_RUCCH_Midamble;
typedef enum E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_adv {
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_adv_sec1	= 0,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_adv_sec2	= 1,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_adv_sec4	= 2,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_adv_sec8	= 3,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_adv_sec16	= 4,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_adv_sec32	= 5,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_adv_sec128	= 6,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_adv_infinity	= 7
} e_E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_adv;
typedef enum E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_SCHED {
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_SCHED_zero	= 0,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_SCHED_ms40	= 1,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_SCHED_ms80	= 2,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_SCHED_ms160	= 3,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_SCHED_ms250	= 4,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_SCHED_sec1	= 5,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_SCHED_sec2	= 6,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_SCHED_sec4	= 7
} e_E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__t_SCHED;
typedef enum E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo_PR {
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo_PR_NOTHING,	/* No components present */
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo_PR_tdd384,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo_PR_tdd768
} E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo_PR;
typedef enum E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd384_PR {
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd384_PR_NOTHING,	/* No components present */
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd384_PR_sF16,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd384_PR_sF8
} E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd384_PR;
typedef enum E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd768_PR {
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd768_PR_NOTHING,	/* No components present */
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd768_PR_sF32,
	E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd768_PR_sF816
} E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd768_PR;
typedef enum E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH {
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms20	= 0,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms40	= 1,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms60	= 2,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms80	= 3,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms120	= 4,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms160	= 5,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms200	= 6,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms240	= 7,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms280	= 8,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms320	= 9,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms400	= 10,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms500	= 11,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms600	= 12,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms800	= 13,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms1000	= 14,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH_ms2000	= 15
} e_E_RUCCH_Info__modeSpecificInfo__tdd128__t_RUCCH;
typedef enum E_RUCCH_Info__modeSpecificInfo__tdd128__t_WAIT {
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_WAIT_everyEDCHTTI	= 0,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_WAIT_ms40	= 1,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_WAIT_ms80	= 2,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_WAIT_ms160	= 3,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_WAIT_ms320	= 4,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_WAIT_ms640	= 5,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_WAIT_ms1000	= 6,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_WAIT_ms2000	= 7
} e_E_RUCCH_Info__modeSpecificInfo__tdd128__t_WAIT;
typedef enum E_RUCCH_Info__modeSpecificInfo__tdd128__t_SI {
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_SI_everyEDCHTTI	= 0,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_SI_ms20	= 1,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_SI_ms40	= 2,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_SI_ms60	= 3,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_SI_ms80	= 4,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_SI_ms160	= 5,
	E_RUCCH_Info__modeSpecificInfo__tdd128__t_SI_ms200	= 6
} e_E_RUCCH_Info__modeSpecificInfo__tdd128__t_SI;

/* Forward declarations */
struct PRACH_Partitioning_LCR_r4;
struct PersistenceScalingFactorList;
struct SYNC_UL_InfoForE_RUCCH;
struct PRACH_Information_LCR_List;

/* E-RUCCH-Info */
typedef struct E_RUCCH_Info {
	struct E_RUCCH_Info__modeSpecificInfo {
		E_RUCCH_Info__modeSpecificInfo_PR present;
		union E_RUCCH_Info__modeSpecificInfo_u {
			struct E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768 {
				long	 e_RUCCH_ConstantValue;
				PersistenceScalingFactor_t	 e_RUCCH_PersistenceScalingFactor;
				long	*t_RUCCH	/* OPTIONAL */;
				long	*e_RUCCH_TS_Number	/* OPTIONAL */;
				long	*e_RUCCH_Midamble	/* OPTIONAL */;
				long	*t_adv	/* OPTIONAL */;
				long	*t_SCHED	/* OPTIONAL */;
				struct E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo {
					E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo_PR present;
					union E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo_u {
						struct E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd384 {
							E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd384_PR present;
							union E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd384_u {
								struct E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd384__sF16 {
									A_SEQUENCE_OF(SF16Codes_t) list;
									
									/* Context for parsing across buffer boundaries */
									asn_struct_ctx_t _asn_ctx;
								} sF16;
								struct E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd384__sF8 {
									A_SEQUENCE_OF(SF8Codes_t) list;
									
									/* Context for parsing across buffer boundaries */
									asn_struct_ctx_t _asn_ctx;
								} sF8;
							} choice;
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} tdd384;
						struct E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd768 {
							E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd768_PR present;
							union E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd768_u {
								struct E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd768__sF32 {
									A_SEQUENCE_OF(SF32Codes_t) list;
									
									/* Context for parsing across buffer boundaries */
									asn_struct_ctx_t _asn_ctx;
								} sF32;
								struct E_RUCCH_Info__modeSpecificInfo__tdd384_tdd768__modeSpecificInfo__tdd768__sF816 {
									A_SEQUENCE_OF(SF16Codes2_t) list;
									
									/* Context for parsing across buffer boundaries */
									asn_struct_ctx_t _asn_ctx;
								} sF816;
							} choice;
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} tdd768;
					} choice;
					
					/* Context for parsing across buffer boundaries */
					asn_struct_ctx_t _asn_ctx;
				} modeSpecificInfo;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} tdd384_tdd768;
			struct E_RUCCH_Info__modeSpecificInfo__tdd128 {
				long	*t_RUCCH	/* OPTIONAL */;
				long	*n_RUCCH	/* OPTIONAL */;
				long	*t_WAIT	/* OPTIONAL */;
				long	*t_SI	/* OPTIONAL */;
				long	*extendedEstimationWindow	/* OPTIONAL */;
				struct PRACH_Partitioning_LCR_r4	*e_RUCCH_AccessServiceClass	/* OPTIONAL */;
				struct PersistenceScalingFactorList	*e_RUCCH_PersistenceScalingFactor	/* OPTIONAL */;
				struct SYNC_UL_InfoForE_RUCCH	*sync_UL_InfoForE_RUCCH	/* OPTIONAL */;
				struct PRACH_Information_LCR_List	*prach_information	/* OPTIONAL */;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} tdd128;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} modeSpecificInfo;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} E_RUCCH_Info_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_t_RUCCH_6;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_e_RUCCH_Midamble_16;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_t_adv_19;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_t_SCHED_28;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_t_RUCCH_49;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_t_WAIT_67;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_t_SI_76;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_E_RUCCH_Info;

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "E-RUCCH-AccessServiceClass.h"
#include "PersistenceScalingFactorList.h"
#include "SYNC-UL-InfoForE-RUCCH.h"
#include "PRACH-Information-LCR-List.h"

#endif	/* _E_RUCCH_Info_H_ */
#include <asn_internal.h>
