/*
 * Generated by asn1c-0.9.24 (http://lionet.info/asn1c)
 * From ASN.1 module "InformationElements"
 * 	found in "../asn/InformationElements.asn"
 * 	`asn1c -fcompound-names -fnative-types`
 */

#ifndef	_E_PUCH_Info_H_
#define	_E_PUCH_Info_H_


#include <asn_application.h>

/* Including external dependencies */
#include "E-TFCS-Info.h"
#include <NativeInteger.h>
#include <BOOLEAN.h>
#include <asn_SEQUENCE_OF.h>
#include <constr_SEQUENCE_OF.h>
#include <constr_SEQUENCE.h>
#include <NativeEnumerated.h>
#include "TPC-StepSizeTDD.h"
#include "PowerControlGAP.h"
#include <constr_CHOICE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum E_PUCH_Info__modeSpecificInfo_PR {
	E_PUCH_Info__modeSpecificInfo_PR_NOTHING,	/* No components present */
	E_PUCH_Info__modeSpecificInfo_PR_tdd348_tdd768,
	E_PUCH_Info__modeSpecificInfo_PR_tdd128
} E_PUCH_Info__modeSpecificInfo_PR;
typedef enum E_PUCH_Info__modeSpecificInfo__tdd128__snpl_ReportType {
	E_PUCH_Info__modeSpecificInfo__tdd128__snpl_ReportType_type1	= 0,
	E_PUCH_Info__modeSpecificInfo__tdd128__snpl_ReportType_type2	= 1
} e_E_PUCH_Info__modeSpecificInfo__tdd128__snpl_ReportType;
typedef enum E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo {
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms10	= 0,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms15	= 1,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms20	= 2,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms25	= 3,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms30	= 4,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms35	= 5,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms40	= 6,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms45	= 7,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms50	= 8,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms55	= 9,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms60	= 10,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms65	= 11,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms70	= 12,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms75	= 13,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms80	= 14,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms85	= 15,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms90	= 16,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms95	= 17,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms100	= 18,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms110	= 19,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms120	= 20,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms140	= 21,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms160	= 22,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms200	= 23,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms240	= 24,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms280	= 25,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms320	= 26,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms400	= 27,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms480	= 28,
	E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo_ms560	= 29
} e_E_PUCH_Info__modeSpecificInfo__tdd128__retransTimerForSchedInfo;

/* Forward declarations */
struct E_PUCH_TS_Slots;
struct UL_SynchronisationParameters_r4;
struct E_PUCH_TS_Slots_LCR;

/* E-PUCH-Info */
typedef struct E_PUCH_Info {
	E_TFCS_Info_t	 e_TFCS_Info;
	struct E_PUCH_Info__modeSpecificInfo {
		E_PUCH_Info__modeSpecificInfo_PR present;
		union E_PUCH_Info__modeSpecificInfo_u {
			struct E_PUCH_Info__modeSpecificInfo__tdd348_tdd768 {
				long	 noSlotsForTFCIandTPC;
				long	 e_PUCH_ContantValue;
				struct E_PUCH_Info__modeSpecificInfo__tdd348_tdd768__e_PUCH_TS_ConfigurationList {
					A_SEQUENCE_OF(struct E_PUCH_TS_Slots) list;
					
					/* Context for parsing across buffer boundaries */
					asn_struct_ctx_t _asn_ctx;
				} e_PUCH_TS_ConfigurationList;
				BOOLEAN_t	 e_PUCH_CodeHopping;
				long	 e_PUCH_TPC_Step_Size;
				long	 minimum_Allowed_Code_Rate;
				long	 maximum_Allowed_Code_Rate;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} tdd348_tdd768;
			struct E_PUCH_Info__modeSpecificInfo__tdd128 {
				long	*snpl_ReportType	/* OPTIONAL */;
				long	 prxdes_base;
				BOOLEAN_t	*beaconPLEst	/* OPTIONAL */;
				TPC_StepSizeTDD_t	 tpc_StepSize;
				PowerControlGAP_t	*pebase_PowerControlGAP	/* OPTIONAL */;
				struct UL_SynchronisationParameters_r4	*ul_SynchronisationParameters	/* OPTIONAL */;
				struct E_PUCH_Info__modeSpecificInfo__tdd128__e_PUCH_TS_ConfigurationList {
					A_SEQUENCE_OF(struct E_PUCH_TS_Slots_LCR) list;
					
					/* Context for parsing across buffer boundaries */
					asn_struct_ctx_t _asn_ctx;
				} e_PUCH_TS_ConfigurationList;
				long	 minimum_Allowed_Code_Rate;
				long	 maximum_Allowed_Code_Rate;
				long	 maximumNumOfRetransSchedInfo;
				long	 retransTimerForSchedInfo;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} tdd128;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} modeSpecificInfo;
	long	*powerOffsetForSchedInfo	/* OPTIONAL */;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} E_PUCH_Info_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_snpl_ReportType_14;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_retransTimerForSchedInfo_27;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_E_PUCH_Info;

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "E-PUCH-TS-Slots.h"
#include "UL-SynchronisationParameters-r4.h"
#include "E-PUCH-TS-Slots-LCR.h"

#endif	/* _E_PUCH_Info_H_ */
#include <asn_internal.h>
