/*
 * Generated by asn1c-0.9.24 (http://lionet.info/asn1c)
 * From ASN.1 module "InformationElements"
 * 	found in "../asn/InformationElements.asn"
 * 	`asn1c -fcompound-names -fnative-types`
 */

#ifndef	_UE_RadioAccessCapability_vb50ext_IEs_H_
#define	_UE_RadioAccessCapability_vb50ext_IEs_H_


#include <asn_application.h>

/* Including external dependencies */
#include "MultiModeRAT-Capability-vb50ext.h"
#include <NativeEnumerated.h>
#include "PhysicalChannelCapability-vb50ext.h"
#include "RLC-Capability-vb50ext.h"
#include <constr_SEQUENCE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum UE_RadioAccessCapability_vb50ext_IEs__supportOfCommonERGCHBasedInterferenceControl {
	UE_RadioAccessCapability_vb50ext_IEs__supportOfCommonERGCHBasedInterferenceControl_true	= 0
} e_UE_RadioAccessCapability_vb50ext_IEs__supportOfCommonERGCHBasedInterferenceControl;
typedef enum UE_RadioAccessCapability_vb50ext_IEs__supportOfFallbackToR99PRACH {
	UE_RadioAccessCapability_vb50ext_IEs__supportOfFallbackToR99PRACH_true	= 0
} e_UE_RadioAccessCapability_vb50ext_IEs__supportOfFallbackToR99PRACH;
typedef enum UE_RadioAccessCapability_vb50ext_IEs__supportOfConcurrentDeployment {
	UE_RadioAccessCapability_vb50ext_IEs__supportOfConcurrentDeployment_true	= 0
} e_UE_RadioAccessCapability_vb50ext_IEs__supportOfConcurrentDeployment;
typedef enum UE_RadioAccessCapability_vb50ext_IEs__supportOfTTIalignmentAndPerHARQProcess {
	UE_RadioAccessCapability_vb50ext_IEs__supportOfTTIalignmentAndPerHARQProcess_true	= 0
} e_UE_RadioAccessCapability_vb50ext_IEs__supportOfTTIalignmentAndPerHARQProcess;
typedef enum UE_RadioAccessCapability_vb50ext_IEs__rsrvcc_SupportFromUTRA_CS_to_EUTRA_FDD {
	UE_RadioAccessCapability_vb50ext_IEs__rsrvcc_SupportFromUTRA_CS_to_EUTRA_FDD_true	= 0
} e_UE_RadioAccessCapability_vb50ext_IEs__rsrvcc_SupportFromUTRA_CS_to_EUTRA_FDD;
typedef enum UE_RadioAccessCapability_vb50ext_IEs__rsrvcc_SupportFromUTRA_CS_to_EUTRA_TDD {
	UE_RadioAccessCapability_vb50ext_IEs__rsrvcc_SupportFromUTRA_CS_to_EUTRA_TDD_true	= 0
} e_UE_RadioAccessCapability_vb50ext_IEs__rsrvcc_SupportFromUTRA_CS_to_EUTRA_TDD;
typedef enum UE_RadioAccessCapability_vb50ext_IEs__supportOfHSDPCCHPowerOffsetExtension {
	UE_RadioAccessCapability_vb50ext_IEs__supportOfHSDPCCHPowerOffsetExtension_true	= 0
} e_UE_RadioAccessCapability_vb50ext_IEs__supportOfHSDPCCHPowerOffsetExtension;
typedef enum UE_RadioAccessCapability_vb50ext_IEs__supportOfSTTDOnDLControlChannelsWhenMultiflowOperationIsActive {
	UE_RadioAccessCapability_vb50ext_IEs__supportOfSTTDOnDLControlChannelsWhenMultiflowOperationIsActive_true	= 0
} e_UE_RadioAccessCapability_vb50ext_IEs__supportOfSTTDOnDLControlChannelsWhenMultiflowOperationIsActive;

/* Forward declarations */
struct UE_RadioAccessCapabBandCombList_vb50ext;
struct MultiflowCapabBandCombList;
struct MultiflowCapability;
struct UE_RadioAccessCapabBandFDDList6;
struct MeasurementCapability_vb50ext;
struct MeasurementCapabilityTDD_vb50ext;

/* UE-RadioAccessCapability-vb50ext-IEs */
typedef struct UE_RadioAccessCapability_vb50ext_IEs {
	MultiModeRAT_Capability_vb50ext_t	 multiModeRAT_Capability;
	long	*supportOfCommonERGCHBasedInterferenceControl	/* OPTIONAL */;
	long	*supportOfFallbackToR99PRACH	/* OPTIONAL */;
	long	*supportOfConcurrentDeployment	/* OPTIONAL */;
	long	*supportOfTTIalignmentAndPerHARQProcess	/* OPTIONAL */;
	struct UE_RadioAccessCapabBandCombList_vb50ext	*ue_RadioAccessCapabBandCombList_vb50ext	/* OPTIONAL */;
	struct MultiflowCapabBandCombList	*multiflowCapabBandCombList	/* OPTIONAL */;
	PhysicalChannelCapability_vb50ext_t	 physicalChannelCapability;
	RLC_Capability_vb50ext_t	 rlc_Capability;
	struct MultiflowCapability	*multiflowCapability	/* OPTIONAL */;
	struct UE_RadioAccessCapabBandFDDList6	*ue_RadioAccessCapabBandFDDList6	/* OPTIONAL */;
	struct MeasurementCapability_vb50ext	*measurementCapability	/* OPTIONAL */;
	struct MeasurementCapabilityTDD_vb50ext	*measurementCapabilityTDD	/* OPTIONAL */;
	long	*rsrvcc_SupportFromUTRA_CS_to_EUTRA_FDD	/* OPTIONAL */;
	long	*rsrvcc_SupportFromUTRA_CS_to_EUTRA_TDD	/* OPTIONAL */;
	long	*supportOfHSDPCCHPowerOffsetExtension	/* OPTIONAL */;
	long	*supportOfSTTDOnDLControlChannelsWhenMultiflowOperationIsActive	/* OPTIONAL */;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} UE_RadioAccessCapability_vb50ext_IEs_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_supportOfCommonERGCHBasedInterferenceControl_3;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_supportOfFallbackToR99PRACH_5;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_supportOfConcurrentDeployment_7;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_supportOfTTIalignmentAndPerHARQProcess_9;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_rsrvcc_SupportFromUTRA_CS_to_EUTRA_FDD_19;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_rsrvcc_SupportFromUTRA_CS_to_EUTRA_TDD_21;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_supportOfHSDPCCHPowerOffsetExtension_23;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_supportOfSTTDOnDLControlChannelsWhenMultiflowOperationIsActive_25;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_UE_RadioAccessCapability_vb50ext_IEs;

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "UE-RadioAccessCapabBandCombList-vb50ext.h"
#include "MultiflowCapabBandCombList.h"
#include "MultiflowCapability.h"
#include "UE-RadioAccessCapabBandFDDList6.h"
#include "MeasurementCapability-vb50ext.h"
#include "MeasurementCapabilityTDD-vb50ext.h"

#endif	/* _UE_RadioAccessCapability_vb50ext_IEs_H_ */
#include <asn_internal.h>
